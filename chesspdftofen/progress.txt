we dont need adaptive threshold because images are uniform so simple threshold

check largest contour for square using hough and square
-problem is squares might not be connected

png for 23 was 12:07 to 12:21 using 3 threads
jpg for 23 was 12:53 to 12:56 using 3 threads

train
linear
Wall time: 41.6 s
rbf
Wall time: 13min 56s
poly
Wall time: 52.8 s
sig
Wall time: 3min 32s

linear_pred = linear.predict(X_test)
Wall time: 17.2 s
poly_pred = poly.predict(X_test)
Wall time: 21.8 s
rbf_pred = rbf.predict(X_test)
Wall time: 52.2 s
sig_pred = sig.predict(X_test)  
Wall time: 53.3 s

0['BlackBishop', 
1'BlackKing', 
2'BlackKnight', 
3'BlackPawn', 
4'BlackQueen', 
5'BlackRook', 
6'BlackSpace', 
7'WhiteBishop', 
8'WhiteKing', 
9'WhiteKnight', 
10'WhitePawn', 
11'WhiteQueen', 
12'WhiteRook', 
13'WhiteSpace']

Accuracy Linear Kernel: 0.9981640146878825
Accuracy Polynomial Kernel: 0.9981640146878825
Accuracy Radial Basis Kernel: 0.9106487148102815
Accuracy Sigmoid Kernel: 0.4222766217870257
[[ 76   0   0   0   0   0   0   0   0   0   0   0   0   0]
 [  0  83   0   0   0   0   0   0   0   0   0   0   0   0]
 [  0   0  79   0   0   0   0   0   0   0   0   0   0   0]
 [  0   0   0  94   0   0   0   0   0   0   0   0   0   0]
 [  0   0   0   0  58   0   0   0   0   0   0   0   0   0]
 [  0   0   0   0   0  41   0   0   0   0   0   0   0   0]
 [  0   0   0   0   0   0 299   0   0   0   0   0   0   3]
 [  0   0   0   0   0   0   0  73   0   0   0   0   0   0]
 [  0   0   0   0   0   0   0   0  97   0   0   0   0   0]
 [  0   0   0   0   0   0   0   0   0 107   0   0   0   0]
 [  0   0   0   0   0   0   0   0   0   0 115   0   0   0]
 [  0   0   0   0   0   0   0   0   0   0   0  87   0   0]
 [  0   0   0   0   0   0   0   0   0   0   0   0  98   0]
 [  0   0   0   0   0   0   0   0   0   0   0   0   0 324]]
[[ 76   0   0   0   0   0   0   0   0   0   0   0   0   0]
 [  0  83   0   0   0   0   0   0   0   0   0   0   0   0]
 [  0   0  79   0   0   0   0   0   0   0   0   0   0   0]
 [  0   0   0  94   0   0   0   0   0   0   0   0   0   0]
 [  0   0   0   0  58   0   0   0   0   0   0   0   0   0]
 [  0   0   0   0   0  41   0   0   0   0   0   0   0   0]
 [  0   0   0   0   0   0 299   0   0   0   0   0   0   3]
 [  0   0   0   0   0   0   0  73   0   0   0   0   0   0]
 [  0   0   0   0   0   0   0   0  97   0   0   0   0   0]
 [  0   0   0   0   0   0   0   0   0 107   0   0   0   0]
 [  0   0   0   0   0   0   0   0   0   0 115   0   0   0]
 [  0   0   0   0   0   0   0   0   0   0   0  87   0   0]
 [  0   0   0   0   0   0   0   0   0   0   0   0  98   0]
 [  0   0   0   0   0   0   0   0   0   0   0   0   0 324]]
[[ 60   0   0   0   0   0   0   0   0   0   0   0   0  16]
 [  0  72   0   0   0   0   0   0   0   0   0   0   0  11]
 [  0   0  70   0   0   0   0   0   0   0   0   0   0   9]
 [  0   0   0  82   0   0   0   0   0   0   0   0   0  12]
 [  0   0   0   0  55   0   0   0   0   0   0   0   0   3]
 [  0   0   0   0   0  33   0   0   0   0   0   0   0   8]
 [  0   0   0   0   0   0 280   0   0   0   0   0   0  22]
 [  0   0   0   0   0   0   0  67   0   0   0   0   0   6]
 [  0   0   0   0   0   0   0   0  83   0   0   0   0  14]
 [  0   0   0   0   0   0   0   0   0  93   0   0   0  14]
 [  0   0   0   0   0   0   0   0   0   0  98   0   0  17]
 [  0   0   0   0   0   0   0   0   0   0   0  80   0   7]
 [  0   0   0   0   0   0   0   0   0   0   0   0  91   7]
 [  0   0   0   0   0   0   0   0   0   0   0   0   0 324]]
[[  9   1   0   0   0   0  39  26   0   1   0   0   0   0]
 [  0   6   0   0   3   0  68   0   6   0   0   0   0   0]
 [  0   0   0   1   0   0  73   0   0   5   0   0   0   0]
 [  0   0   0   4   0   0  89   0   0   0   0   0   0   1]
 [  0   0   0   0  51   0   1   0   0   0   0   6   0   0]
 [  0   0   2   4   0   0   3   0   0   0   0  11  21   0]
 [  0   1  78   0   0   0 196   0   7   1   3   0   0  16]
 [  0   0   0   1   0   0  45  27   0   0   0   0   0   0]
 [  0   6   0   0   2   0  81   0   7   0   0   0   0   1]
 [  0   0   0   0   0   0  90   0   0  15   0   0   0   2]
 [  0   0   0   0   0   0 112   0   0   0   3   0   0   0]
 [  0   2   0   0  20   0  35   0   0   0   0  30   0   0]
 [  0   0   2   1   0   0   6   0   0   0   0   7  82   0]
 [  0   0   0   0   0   0  64   0   0   0   0   0   0 260]]

 28,032 Files training
 des - their dataset padding (3,3) no resize
winSize = (128, 128) #
blockSize = (64, 64) #
blockStride = (32, 32) #
cellSize = (16, 16) #
im = cv2.resize(im, (125, 125))
x = hog.compute(im, padding=(3,3))

 des2 - my dataset resize to 128x128
winSize = (128, 128) #
blockSize = (64, 64) #
blockStride = (32, 32) #
cellSize = (16, 16) #
im = cv2.resize(im, (128, 128))
x = hog.compute(im)

 des3 - my dataset with normal, gaussian, median blur
winSize = (128, 128) #
blockSize = (64, 64) #
blockStride = (32, 32) #
cellSize = (16, 16) #
im = cv2.resize(im, (128, 128))
x = hog.compute(im)

 des4 - my dataset with normal, gaussian, median blur with smaller windows
winSize = (128, 128) #
blockSize = (16, 16) #
blockStride = (8, 8) #
cellSize = (8, 8) #
im = cv2.resize(im, (128, 128))
x = hog.compute(im)

 des5 - my dataset with normal, gaussian, median blur with smaller windows and signed
winSize = (128, 128) #
blockSize = (16, 16) #
blockStride = (8, 8) #
cellSize = (8, 8) #
im = cv2.resize(im, (128, 128))
x = hog.compute(im)
signedGradients = True

des6 - my dataset with normal, gaussian, median blur with large windows and signed
winSize = (128, 128) #
blockSize = (64, 64) #
blockStride = (32, 32) #
cellSize = (16, 16) #
im = cv2.resize(im, (128, 128))
x = hog.compute(im)
signedGradients = True

 des3
linear
Wall time: 35.6 s

%%time
linear_pred = linear.predict(X_test)
Wall time: 15.2 s
Accuracy Linear Kernel: 1.0
[[ 413    0    0    0    0    0    0    0    0    0    0    0    0    0]
 [   0  267    0    0    0    0    0    0    0    0    0    0    0    0]
 [   0    0  328    0    0    0    0    0    0    0    0    0    0    0]
 [   0    0    0 1651    0    0    0    0    0    0    0    0    0    0]
 [   0    0    0    0  252    0    0    0    0    0    0    0    0    0]
 [   0    0    0    0    0  504    0    0    0    0    0    0    0    0]
 [   0    0    0    0    0    0 4962    0    0    0    0    0    0    0]
 [   0    0    0    0    0    0    0  442    0    0    0    0    0    0]
 [   0    0    0    0    0    0    0    0  290    0    0    0    0    0]
 [   0    0    0    0    0    0    0    0    0  365    0    0    0    0]
 [   0    0    0    0    0    0    0    0    0    0 1649    0    0    0]
 [   0    0    0    0    0    0    0    0    0    0    0  266    0    0]
 [   0    0    0    0    0    0    0    0    0    0    0    0  531    0]
 [   0    0    0    0    0    0    0    0    0    0    0    0    0 4900]]


des2
linear
Wall time: 10.4 s

linear_pred = linear.predict(X_test)
Wall time: 3.34 s
Accuracy Linear Kernel: 1.0
[[ 132    0    0    0    0    0    0    0    0    0    0    0    0    0]
 [   0   84    0    0    0    0    0    0    0    0    0    0    0    0]
 [   0    0  110    0    0    0    0    0    0    0    0    0    0    0]
 [   0    0    0  537    0    0    0    0    0    0    0    0    0    0]
 [   0    0    0    0   95    0    0    0    0    0    0    0    0    0]
 [   0    0    0    0    0  159    0    0    0    0    0    0    0    0]
 [   0    0    0    0    0    0 1647    0    0    0    0    0    0    0]
 [   0    0    0    0    0    0    0  126    0    0    0    0    0    0]
 [   0    0    0    0    0    0    0    0   92    0    0    0    0    0]
 [   0    0    0    0    0    0    0    0    0  124    0    0    0    0]
 [   0    0    0    0    0    0    0    0    0    0  550    0    0    0]
 [   0    0    0    0    0    0    0    0    0    0    0  100    0    0]
 [   0    0    0    0    0    0    0    0    0    0    0    0  161    0]
 [   0    0    0    0    0    0    0    0    0    0    0    0    0 1690]]

 des4
 linear
Wall time: 10min 21s
Accuracy Linear Kernel: 1.0
[[ 413    0    0    0    0    0    0    0    0    0    0    0    0    0]
 [   0  267    0    0    0    0    0    0    0    0    0    0    0    0]
 [   0    0  328    0    0    0    0    0    0    0    0    0    0    0]
 [   0    0    0 1651    0    0    0    0    0    0    0    0    0    0]
 [   0    0    0    0  252    0    0    0    0    0    0    0    0    0]
 [   0    0    0    0    0  504    0    0    0    0    0    0    0    0]
 [   0    0    0    0    0    0 4962    0    0    0    0    0    0    0]
 [   0    0    0    0    0    0    0  442    0    0    0    0    0    0]
 [   0    0    0    0    0    0    0    0  290    0    0    0    0    0]
 [   0    0    0    0    0    0    0    0    0  365    0    0    0    0]
 [   0    0    0    0    0    0    0    0    0    0 1649    0    0    0]
 [   0    0    0    0    0    0    0    0    0    0    0  266    0    0]
 [   0    0    0    0    0    0    0    0    0    0    0    0  531    0]
 [   0    0    0    0    0    0    0    0    0    0    0    0    0 4900]]


 des5
 linear
Wall time: 9min 5s
linear_pred = linear.predict(X_test)
Wall time: 4min 15s
Accuracy Linear Kernel: 1.0
[[ 413    0    0    0    0    0    0    0    0    0    0    0    0    0]
 [   0  267    0    0    0    0    0    0    0    0    0    0    0    0]
 [   0    0  328    0    0    0    0    0    0    0    0    0    0    0]
 [   0    0    0 1651    0    0    0    0    0    0    0    0    0    0]
 [   0    0    0    0  252    0    0    0    0    0    0    0    0    0]
 [   0    0    0    0    0  504    0    0    0    0    0    0    0    0]
 [   0    0    0    0    0    0 4962    0    0    0    0    0    0    0]
 [   0    0    0    0    0    0    0  442    0    0    0    0    0    0]
 [   0    0    0    0    0    0    0    0  290    0    0    0    0    0]
 [   0    0    0    0    0    0    0    0    0  365    0    0    0    0]
 [   0    0    0    0    0    0    0    0    0    0 1649    0    0    0]
 [   0    0    0    0    0    0    0    0    0    0    0  266    0    0]
 [   0    0    0    0    0    0    0    0    0    0    0    0  531    0]
 [   0    0    0    0    0    0    0    0    0    0    0    0    0 4900]]

 des6
 linear
Wall time: 31.9 s
linear_pred = linear.predict(X_test)
Wall time: 10.5 s
Accuracy Linear Kernel: 1.0
[[ 413    0    0    0    0    0    0    0    0    0    0    0    0    0]
 [   0  267    0    0    0    0    0    0    0    0    0    0    0    0]
 [   0    0  328    0    0    0    0    0    0    0    0    0    0    0]
 [   0    0    0 1651    0    0    0    0    0    0    0    0    0    0]
 [   0    0    0    0  252    0    0    0    0    0    0    0    0    0]
 [   0    0    0    0    0  504    0    0    0    0    0    0    0    0]
 [   0    0    0    0    0    0 4962    0    0    0    0    0    0    0]
 [   0    0    0    0    0    0    0  442    0    0    0    0    0    0]
 [   0    0    0    0    0    0    0    0  290    0    0    0    0    0]
 [   0    0    0    0    0    0    0    0    0  365    0    0    0    0]
 [   0    0    0    0    0    0    0    0    0    0 1649    0    0    0]
 [   0    0    0    0    0    0    0    0    0    0    0  266    0    0]
 [   0    0    0    0    0    0    0    0    0    0    0    0  531    0]
 [   0    0    0    0    0    0    0    0    0    0    0    0    0 4900]]


 des - their dataset padding (3,3) no resize
     0    1    2    3    4    5    6    7    8    9   10   11   12   13
[[ 448    1    0    6    0    0    0  132    0    1    1    1    0    0]
 [   2  409    0    0    0    0    0    0    7    0    0    1    0    0]
 [   0    1  508    8    0    0    0    0    4   19    0    1    0    0]
 [  14    1   11 1797    0    0   14    0  112   93  544    2    0    0]
 [   0    0    0    0  349    3    0    0    0    0    0   45    1    0]
 [   0    0    0    2    1  509    0    0    0    0    0   58  180    0]
 [   0    0    0    7    0    0 8252    0    0    0   16    0    0    0]
 [ 187    5    0    5    1   12    0  340    7    0    0    3    0    0]
 [  21  227    1    0    3    0    0    0  146    0    0   19    1    0]
 [   0    0    5    0    0    0    0    1   56  463    5    0    1    0]
 [   0   11   60  423    0   37    2    1   42   14 2006    0    0    0]
 [   0    0    0    0   56    0    0    0    0    0    0  343    0    0]
 [   0    0    0    0    0  294    0    0    0    0    0   40  421    0]
 [   0    0    0    0    0    0    0    0    0 4487    0    0    0 3509]]

[0.75932203, 0.97613365, 0.93900185, 0.69435858, 0.87688442,
 0.67866667, 0.99722054, 0.60714286, 0.3492823 , 0.87193974,
 0.77272727, 0.85964912, 0.55761589, 0.43884442]

accuracy 0.7271778042959427
total 26816.0
Wall time: 6min 22s

 des2 - my dataset resize to 128x128
     0    1    2    3    4    5    6    7    8    9   10   11   12   13
[[ 588    0    0    0    1    0    0    0    0    0    0    1    0    0]
 [ 124  290    0    1    1    0    0    0    0    0    0    3    0    0]
 [   0    0  539    2    0    0    0    0    0    0    0    0    0    0]
 [  15    0    3 2542    0    0    0    0    0   28    0    0    0    0]
 [   0    0    0    0   53    0    0    0    0    0    0  345    0    0]
 [   1    0    0    0    0  748    0    0    0    0    0    0    1    0]
 [   0    0    0    0    0    0 8275    0    0    0    0    0    0    0]
 [ 107    0    0    0    0    1    0  451    1    0    0    0    0    0]
 [   1    4    0    0    3    0    0    2  405    0    0    3    0    0]
 [   0    0   22    6    0    0    0    0    0  503    0    0    0    0]
 [   0    0    1 2320   21    0    0    0    0   12  242    0    0    0]
 [   0    0    0    0   11    0    0    0    0    0    0  388    0    0]
 [   0    0    0    0    0  249    0    0    0    0    0    0  506    0]
 [   0    0    0    0    0    0    0    0    0    0    0    0    0 7996]]
accuracy 0.8773120525059666
total 26816
Wall time: 46.2 s

[0.99661017, 0.69212411, 0.99630314, 0.98222566, 0.13316583,
 0.99733333, 1.        , 0.80535714, 0.96889952, 0.9472693 ,
 0.09322034, 0.97243108, 0.67019868, 1.        ]

 des3 - my dataset with normal, gaussian, median blur
     0    1    2    3    4    5    6    7    8    9   10   11   12   13
[[ 529    0    0    0    0    0    0   59    0    0    0    2    0    0]
 [ 122  295    0    0    0    0    0    0    0    0    0    2    0    0]
 [   0    0  535    2    0    0    0    0    0    4    0    0    0    0]
 [  14    0    3 2540    0    0    0    0    0   31    0    0    0    0]
 [   0    0    0    0   27    0    0    0    0    0    0  371    0    0]
 [   3    0    0    0    0  743    0    0    0    0    0    0    4    0]
 [   2    0    0    0    0    0 8273    0    0    0    0    0    0    0]
 [  28    0    0    0    0    0    0  530    1    0    0    0    1    0]
 [   0    3    0    0    0    0    0    2  406    0    0    7    0    0]
 [   1    0   26    5    0    0    0    0    0  499    0    0    0    0]
 [   1    0    1 2453   16    0    0    0    0   15  108    2    0    0]
 [   0    0    0    0    0    0    0    0    0    0    0  399    0    0]
 [   0    0    0    0    0   24    0    0    0    0    0    0  731    0]
 [   0    0    0    0    0    0    0    0    0    0    0    0    0 7996]]
accuracy 0.8804818019093079
total 26816
Wall time: 53.9 s
[0.89661017, 0.70405728, 0.98890943, 0.98145286, 0.0678392 ,
 0.99066667, 0.99975831, 0.94642857, 0.97129187, 0.93973635,
 0.04160247, 1.        , 0.96821192, 1.        ]

des4 - my dataset with normal, gaussian, median blur with smaller windows
     0    1    2    3    4    5    6    7    8    9   10   11   12   13
[[ 587    0    2    0    1    0    0    0    0    0    0    0    0    0]
 [ 350   56    0    4    5    0    0    0    0    0    0    4    0    0]
 [   0    0  540    1    0    0    0    0    0    0    0    0    0    0]
 [  97    0  104 2377    7    0    0    0    0    2    1    0    0    0]
 [   0    0    0    0  229    0    0    0    0    0    0  169    0    0]
 [   3    0    1    0    0  746    0    0    0    0    0    0    0    0]
 [  20    0    0    4    0    0 8251    0    0    0    0    0    0    0]
 [ 157    0    0    0    1    1    0  400    0    0    0    1    0    0]
 [   0   11    0    0    1    0    0   11  371    0    0   24    0    0]
 [   1    0   53    3    0    0    0    0    0  474    0    0    0    0]
 [  15    0   37 1006   31    0    0    0    0    2 1505    0    0    0]
 [   0    0    0    0  110    0    0    0    0    0    0  289    0    0]
 [   1    0    2    0    0  270    0   26    0    0    0    2  454    0]
 [   0    0    0    0    0    0    0    0    0    0    0    0    0 7996]]
accuracy 0.905243138424821
total 26816
Wall time: 10min 15s
[0.99491525, 0.13365155, 0.99815157, 0.91846986, 0.57537688,
 0.99466667, 0.9970997 , 0.71428571, 0.88755981, 0.89265537,
 0.57973806, 0.72431078, 0.6013245 , 1.        ]

 des5 - my dataset with normal, gaussian, median blur with smaller windows and signed
     0    1    2    3    4    5    6    7    8    9   10   11   12   13
[[ 578    0    0    0    5    0    0    7    0    0    0    0    0    0]
 [ 248   46    4    0  115    0    0    4    0    0    0    2    0    0]
 [   0    0  540    0    1    0    0    0    0    0    0    0    0    0]
 [ 208    0   63 2310    4    0    0    0    0    3    0    0    0    0]
 [   0    0    0    0  322    0    0    0    0    0    0   76    0    0]
 [  15    0    4    0    0  652    0   16    0    0    0    0   63    0]
 [   0    0    0    0    0    0 8275    0    0    0    0    0    0    0]
 [  38    0    0    0    1    2    0  517    0    0    0    2    0    0]
 [   1    3    0    0    0    0    0    9  366    0    0   39    0    0]
 [   1    0    0    0    3    0    0    0    0  524    2    1    0    0]
 [  44    0    0    0   33    0    0   17    0   64 2437    1    0    0]
 [   0    0    0    0  144    0    0    0    0    0    0  255    0    0]
 [   0    0    0    0    0    0    0   16    0    0    0   20  719    0]
 [   0    0    0    0    0    0    0    0    0    0    0    0    0 7996]]
accuracy 0.9523045942720764
total 26816
Wall time: 7min 13s

[0.97966102, 0.1097852 , 0.99815157, 0.89258114, 0.80904523,
 0.86933333, 1.        , 0.92321429, 0.87559809, 0.98681733,
 0.93875193, 0.63909774, 0.95231788, 1.        ]

des6 - my dataset with normal, gaussian, median blur with large windows and signed
     0    1    2    3    4    5    6    7    8    9   10   11   12   13
[[ 589    0    0    0    0    0    0    0    0    0    0    1    0    0]
 [  62  352    0    0    0    0    0    4    0    0    1    0    0    0]
 [   0    0  537    2    0    0    0    0    0    2    0    0    0    0]
 [  23    0   28 2536    0    0    0    0    0    1    0    0    0    0]
 [   0    0    0    0  299    0    0    0    0    0    0   99    0    0]
 [   3    0    0    0    0  745    0    0    0    0    0    0    2    0]
 [   0    0    0    0    0    0 8275    0    0    0    0    0    0    0]
 [   3    0    0    0    0    0    0  555    1    0    0    0    1    0]
 [   0    0    0    0    0    0    0    7  408    0    0    1    2    0]
 [   1    0    0    0    0    0    0    1    0  524    5    0    0    0]
 [   1    0    0    0   12    0    0    3    0   42 2532    6    0    0]
 [   0    0    0    0    0    0    0    0    0    0    0  399    0    0]
 [   0    0    0    0    0    0    0    6    0    0    0    0  749    0]
 [   0    0    0    0    0    0    0    0    0    0    0    0    0 7996]]
accuracy 0.9880668257756563
total 26816
Wall time: 1min 48s

[0.99830508, 0.84009547, 0.99260628, 0.97990726, 0.75125628,
 0.99333333, 1.        , 0.99107143, 0.97607656, 0.98681733,
 0.97534669, 1.        , 0.99205298, 1.        ]